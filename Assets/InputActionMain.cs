//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActionMain.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionMain: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionMain()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionMain"",
    ""maps"": [
        {
            ""name"": ""MainActionMap"",
            ""id"": ""90f7b568-6226-4cfc-b652-526faaf55064"",
            ""actions"": [
                {
                    ""name"": ""OnMouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""80a07343-384a-48b0-a453-5964b30c51f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""290ff990-581e-4119-9caf-9e2de1a18c26"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""bdb2bc8e-193a-4c2e-a60d-51914e1c6f29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""89b84611-2ed8-4714-a24a-a438d46fe061"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ads"",
                    ""type"": ""Button"",
                    ""id"": ""a6454e74-2181-4538-a92f-7ec319c0a95a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64c9926e-ab41-4697-bd8b-4916ba3ec54c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5984a72-fff0-47c5-8394-377028a46655"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9f08c8c-f787-400a-b888-bb4b560ef5b3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""741ef583-d237-440c-ad87-520c7dba05e6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b292f16d-868c-47a0-a8f7-b918ff5b5ff6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ads"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainActionMap
        m_MainActionMap = asset.FindActionMap("MainActionMap", throwIfNotFound: true);
        m_MainActionMap_OnMouseMove = m_MainActionMap.FindAction("OnMouseMove", throwIfNotFound: true);
        m_MainActionMap_Slide = m_MainActionMap.FindAction("Slide", throwIfNotFound: true);
        m_MainActionMap_Reload = m_MainActionMap.FindAction("Reload", throwIfNotFound: true);
        m_MainActionMap_Shoot = m_MainActionMap.FindAction("Shoot", throwIfNotFound: true);
        m_MainActionMap_Ads = m_MainActionMap.FindAction("Ads", throwIfNotFound: true);
    }

    ~@InputActionMain()
    {
        UnityEngine.Debug.Assert(!m_MainActionMap.enabled, "This will cause a leak and performance issues, InputActionMain.MainActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainActionMap
    private readonly InputActionMap m_MainActionMap;
    private List<IMainActionMapActions> m_MainActionMapActionsCallbackInterfaces = new List<IMainActionMapActions>();
    private readonly InputAction m_MainActionMap_OnMouseMove;
    private readonly InputAction m_MainActionMap_Slide;
    private readonly InputAction m_MainActionMap_Reload;
    private readonly InputAction m_MainActionMap_Shoot;
    private readonly InputAction m_MainActionMap_Ads;
    public struct MainActionMapActions
    {
        private @InputActionMain m_Wrapper;
        public MainActionMapActions(@InputActionMain wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMouseMove => m_Wrapper.m_MainActionMap_OnMouseMove;
        public InputAction @Slide => m_Wrapper.m_MainActionMap_Slide;
        public InputAction @Reload => m_Wrapper.m_MainActionMap_Reload;
        public InputAction @Shoot => m_Wrapper.m_MainActionMap_Shoot;
        public InputAction @Ads => m_Wrapper.m_MainActionMap_Ads;
        public InputActionMap Get() { return m_Wrapper.m_MainActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IMainActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Add(instance);
            @OnMouseMove.started += instance.OnOnMouseMove;
            @OnMouseMove.performed += instance.OnOnMouseMove;
            @OnMouseMove.canceled += instance.OnOnMouseMove;
            @Slide.started += instance.OnSlide;
            @Slide.performed += instance.OnSlide;
            @Slide.canceled += instance.OnSlide;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Ads.started += instance.OnAds;
            @Ads.performed += instance.OnAds;
            @Ads.canceled += instance.OnAds;
        }

        private void UnregisterCallbacks(IMainActionMapActions instance)
        {
            @OnMouseMove.started -= instance.OnOnMouseMove;
            @OnMouseMove.performed -= instance.OnOnMouseMove;
            @OnMouseMove.canceled -= instance.OnOnMouseMove;
            @Slide.started -= instance.OnSlide;
            @Slide.performed -= instance.OnSlide;
            @Slide.canceled -= instance.OnSlide;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Ads.started -= instance.OnAds;
            @Ads.performed -= instance.OnAds;
            @Ads.canceled -= instance.OnAds;
        }

        public void RemoveCallbacks(IMainActionMapActions instance)
        {
            if (m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActionMapActions @MainActionMap => new MainActionMapActions(this);
    public interface IMainActionMapActions
    {
        void OnOnMouseMove(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnAds(InputAction.CallbackContext context);
    }
}
